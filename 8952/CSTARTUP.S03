;---------------------------------------------------------------;
;						  		;
;		    	CSTARTUP.S03				;
;						      		;
; This module contains the entire code executed before the C	;
; "main" function is called.  The code can be tailored to suit	;
; special hardware needs.  The code is designed to run on any	;
; processor based on the 8051 architecture.			;
;						   		;
; Version: 4.00 [A.R. 01/Jan/90]				;
;---------------------------------------------------------------;
	NAME	CSTARTUP

$defmodel.inc				; Defines memory model

	EXTERN	?C_EXIT			; Where to go when program is done
	EXTERN	_R			; Register bank (0, 8, 16 or 24)
	EXTERN	main			; First C function usually

;---------------------------------------------------------------;
; The C stack segment. Should be mapped into internal data RAM	;
;---------------------------------------------------------------;
; The C stack is used for LCALL's and temporary storage for   	;
; code generator help-routines (math etc).  The stack will be	;
; located after all other internal RAM variables if the stan-	;
; dard linking procedure is followed.  Note that C interrupt	;
; routines can double stack size demands.			;
;---------------------------------------------------------------;

	RSEG	CSTACK
stack_begin:
	DS	30			; Increase if needed

	COMMON	INTVEC			; Should be at location zero

;---------------------------------------------------------------;
; C interrupt routines with defined [vectors] will reserve	;
; space in this area.  So will handlers written in assembler if	;
; they follow the recommended format.				;
;---------------------------------------------------------------;

startup:
	LJMP	init_C


	RSEG	RCODE			; Should be loaded after INTVEC
init_C:
	MOV	SP,#stack_begin - 1	; From low to high addresses

;---------------------------------------------------------------;
; 	      C variable initialization section		      	;
; 	      =================================		      	;
; 							      	;
; If there is no demand that global/static C variables should	;
; have a defined value at startup (required by ANSI), the	;
; following section can be removed to conserve code memory	;
; size.   Note that this part calls functions in the end of	;
; this file, that also can be removed if initialized values are ;
; not needed.			      				;
;                                                             	;
; Systems controlled by a watch-dog may require additional    	;
; code insertions as the initialization can take several      	;
; milliseconds (if there are many variables) to complete.     	;
; These parts are marked with	 *** WDG ***		      	;
;---------------------------------------------------------------;

;===============================================================;
; Zero out sections containing variables without explicit	;
; initializers like in:						;
;								;
;	int i;							;
;	xdata double d[10];					;
;===============================================================;

	MOV	R0,#stack_begin - 1		; Assumes that CSTACK is last
CLEAR_IRAM:
	MOV	@R0,#0
	DJNZ	R0,CLEAR_IRAM
	

;===============================================================;
; Copy initializers into the proper memory segments for decla-	;
; rations like:							;
;								;
; 	int i = 7;						;
;	idata char *cp = "STRING";				;
;===============================================================;

;---------------------------------------------------------------;
; 	   C variable initialization section end	      	;
;---------------------------------------------------------------;

;---------------------------------------------------------------;
; Activate the (at link-time) selected register bank.		;
;---------------------------------------------------------------;

	MOV	PSW,#_R

;---------------------------------------------------------------;
; If hardware must be initiated from assembly or if interrupts	;
; should be on when reaching main, this is the place to insert	;
; such code.						      	;
;---------------------------------------------------------------;

	IF	banked_mode

	EXTERN	?X_CALL_L18

	MOV	A,#$BYTE3 main
	MOV	DPTR,#main
	LCALL	?X_CALL_L18		; main()

	ELSE

	LCALL	main			; main()

	ENDIF

;---------------------------------------------------------------;
; Now when we are ready with our C program (usually 8051 C    	;
; programs are continuous) we must perform a system-dependent	;
; action.  In this simple case we just stop.		      	;
;---------------------------------------------------------------;
; DO NOT CHANGE NEXT LINE OF CSTARTUP IF YOU WANT TO RUN YOUR 	;
; SOFTWARE WITH THE AID OF THE C-SPY HLL DEBUGGER.  IT CAN	;
; THOUGH BE REMOVED IF YOUR PROGRAM IS CONTINUOUS (NO EXIT).	;
; If it is removed the EXTERN ?C_EXIT line should also be re-	;
; moved to avoid linking of the "exit" module			;
;---------------------------------------------------------------;
        LJMP  0

;---------------------------------------------------------------;
; Last part of the C variable initializer code.		      	;
;---------------------------------------------------------------;
COMP_R67_DPTR:
;===========================;
;       *** WDG ***	    ;
;                           ;
; ACC, B, R0-R3 may be used ;
;===========================;

	RSEG	D_UDATA
	RSEG	I_UDATA
	RSEG	X_UDATA
	RSEG	D_CDATA
	RSEG	I_CDATA
	RSEG	X_CDATA
	RSEG	D_IDATA
	RSEG	I_IDATA
	RSEG	X_IDATA
	RSEG	ECSTR
	RSEG	CCSTR

	ENDMOD	startup

;---------------------------------------------------------------;
; Function/module: exit (int code)			      	;
;							      	;
; When C-SPY is used this code will automatically be replaced 	;
; by a 'debug' version of exit().			      	;
;---------------------------------------------------------------;
	MODULE	exit

	PUBLIC	exit
	$DEFFN	exit(0,0,0,0,0,0,0,0)
	PUBLIC	?C_EXIT

	RSEG	RCODE

?C_EXIT:
exit:
;---------------------------------------------------------------;
; The next line could be replaced by user defined code.       	;
;---------------------------------------------------------------;
        LJMP    0               ; Forever...

	END

